// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
//GS
//VP
//GSC
//GSS
//GST
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum POSITION {
  GS
  VP
  GSC
  GSS
  GST
}

enum POST {
  PHOTO
  VIDEO
  TEXT
  POLL
}

model User {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  username   String    @unique
  email      String    @unique
  name       String
  votes      String    @default("00000")
  firebaseId String?   @unique
  Post       Post[]
  Comment    Comment[]
  likes      Like[]
}

model Post {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  type        POST
  question    String?
  options     Option[]
  title       String
  asset       String?
  description String
  likes       Int    @default(0)
  authorId    String    @db.ObjectId
  author      User      @relation(fields: [authorId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Comment     Comment[]
  likedBy     Like[]
}

model Like {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  postId String @db.ObjectId

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@unique([userId, postId], name: "userPostUnique")
}

model Option {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  postId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  votes     Int   @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  postId    String    @db.ObjectId
  post      Post      @relation(fields: [postId], references: [id])
  authorId  String    @db.ObjectId
  author    User      @relation(fields: [authorId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  likes     Int       @default(0)
  parentId  String?   @db.ObjectId
  parent    Comment?  @relation("CommentToReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("CommentToReplies")
}

model ExitPoll {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  positions Position[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Position {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       POSITION
  candidates Candidate[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  ExitPoll   ExitPoll?   @relation(fields: [exitPollId], references: [id])
  exitPollId String?     @db.ObjectId
}

model Candidate {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  designation String
  photo       String?
  description String?
  positionId  String   @db.ObjectId
  position    Position @relation(fields: [positionId], references: [id])
  votes       Int   @default(0)
}
